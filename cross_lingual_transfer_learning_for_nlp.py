# -*- coding: utf-8 -*-
"""Cross-Lingual Transfer Learning for NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xu0JOwMpc-Ap_obIS4tdfOR8EoCX9f1g
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Create a figure with two subplots for a combined view
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))
fig.suptitle('Visual Outputs from the Cross-Lingual Transfer Learning Paper', fontsize=16)

# --------------------------------------------------------------------------
# Plot 1: Model Performance on Different Resource Levels (Left Subplot)
# This reproduces the bar chart from page 14 of the document.
# --------------------------------------------------------------------------

# Data is estimated from the bar chart on page 14 and supported by text on page 13.
# F1 scores were ~90% for high-resource [cite: 263], ~70-75% for zero-shot[cite: 264],
# and showed a +7-10% improvement for few-shot[cite: 265].
bar_chart_data = {
    'Dataset': [
        'English-French (High-Resource)', 'English-French (High-Resource)', 'English-French (High-Resource)',
        'English-Swahili (Zero-Shot)', 'English-Swahili (Zero-Shot)', 'English-Swahili (Zero-Shot)',
        'English-Tamil (Few-Shot)', 'English-Tamil (Few-Shot)', 'English-Tamil (Few-Shot)'
    ],
    'Metric': [
        'F1 Score', 'Precision', 'Recall',
        'F1 Score', 'Precision', 'Recall',
        'F1 Score', 'Precision', 'Recall'
    ],
    'Score (%)': [88, 89, 87, 72, 74, 71, 79, 81, 78]
}
df = pd.DataFrame(bar_chart_data)

# Create the bar plot on the first subplot (ax1)
sns.set_style("whitegrid")
sns.barplot(x='Dataset', y='Score (%)', hue='Metric', data=df, palette='deep', ax=ax1)

# Set titles and labels to match the document's chart [cite: 274, 276, 267]
ax1.set_title('Model Performance on Different Resource Levels', fontsize=14)
ax1.set_xlabel('Dataset', fontsize=12)
ax1.set_ylabel('Score (%)', fontsize=12)
ax1.set_ylim(0, 95)
ax1.tick_params(axis='x', rotation=15) # Rotate labels for readability
ax1.legend(title='Metric')

# --------------------------------------------------------------------------
# Plot 2: Confusion Matrix for Sequence Labeling (Right Subplot)
# This reproduces the confusion matrix from page 15 of the document.
# --------------------------------------------------------------------------

# Data for the confusion matrix is taken directly from the plot on page 15.
# Labels are ORG, LOC, PER, and O.
confusion_matrix_data = np.array([
    # ORG, LOC, PER, O (Predicted)
    [2, 0, 0, 0],   # ORG (True)
    [0, 2, 0, 0],   # LOC (True)
    [0, 0, 1, 2],   # PER (True)
    [0, 1, 0, 2]    # O (True)
])
labels = ['ORG', 'LOC', 'PER', 'O']

# Create the heatmap on the second subplot (ax2)
sns.heatmap(
    confusion_matrix_data,
    annot=True,
    fmt='d', # Integer format
    cmap='Blues',
    xticklabels=labels,
    yticklabels=labels,
    ax=ax2,
    cbar=True
)

# Set titles and labels to match the document's chart [cite: 286, 284, 303]
ax2.set_title('Confusion Matrix for Sequence Labeling (NER Example)', fontsize=14)
ax2.set_xlabel('Predicted label', fontsize=12)
ax2.set_ylabel('True label', fontsize=12)

# --- Display Final Output ---
plt.tight_layout(rect=[0, 0, 1, 0.96]) # Adjust layout to make room for suptitle
plt.show()